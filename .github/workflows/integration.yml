name: "Project Integration Tests"

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-state-example-project:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        branch: [simulation_engine]  # Adjust branches/tags as needed

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "corretto"
          java-version: "11"

      - name: SetUp ois-core
        run: |
          git clone --branch ${{ matrix.branch }} https://github.com/attiasas/ois-core.git
          cd ois-core
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./gradlew.bat publishToMavenLocal
          else
            ./gradlew publishToMavenLocal
          fi
          cd ..  # Return to the main project working directory
        shell: bash

      - name: Navigate to Test Project Directory
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cd src\\test\\resources\\projects\\state-example
          else
            cd src/test/resources/projects/state-example
          fi
        shell: bash

      - name: Run HTML Task
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./gradlew.bat runHtml | tee output.log &
            while (!(Select-String -Path output.log -Pattern "http://localhost:8080/")) { Start-Sleep -Seconds 5 }
          else
            ./gradlew runHtml | tee output.log &
            while ! grep -q "http://localhost:8080/" output.log; do sleep 5; done
          fi
        shell: bash

      - name: Complete Task
        run: echo "Any key to finish the task" | cat > /dev/null

  export-state-example-project:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        branch: [simulation_engine]  # Adjust branches/tags as needed

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "corretto"
          java-version: "11"

      - name: SetUp ois-core
        run: |
          git clone --branch ${{ matrix.branch }} https://github.com/attiasas/ois-core.git
          cd ois-core
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./gradlew.bat publishToMavenLocal
          else
            ./gradlew publishToMavenLocal
          fi
          cd ..  # Return to the main project working directory
        shell: bash

      - name: Navigate to Test Project Directory
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cd src\\test\\resources\\projects\\state-example
          else
            cd src/test/resources/projects/state-example
          fi
        shell: bash

      - name: Run Export Task
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./gradlew.bat export
          else
            ./gradlew export
          fi
        shell: bash

      - name: Check Files in Distribution Directory
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            if (Test-Path -Path "build\\distribution\\html" -and (Get-ChildItem -Path "build\\distribution\\html" | Measure-Object).Count -gt 0) {
              Write-Output "Files were successfully created in build\\distribution\\html."
            } else {
              Write-Output "No files found in build\\distribution\\html" ; exit 1
            }
          else
            if [ -d "build/distribution/html" ] && [ "$(ls -A build/distribution/html)" ]; then
              echo "Files were successfully created in build/distribution/html."
            else
              echo "No files found in build/distribution/html" && exit 1
            fi
          fi
        shell: bash
