name: "Project Integration Tests"

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  export-state-example-project:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        branch: [main]  # Adjust branches/tags as needed

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "corretto"
          java-version: "19"

      - name: SetUp ois-core
        run: |
          git clone https://github.com/attiasas/ois-core.git --branch ${{ matrix.branch }}
          cd ois-core
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./gradlew.bat publishToMavenLocal
          else
            chmod +x gradlew
            ./gradlew publishToMavenLocal
          fi
          cd ..  # Return to the main project working directory
        shell: bash

      - name: Publish Plugin to MavenLocal
        run: |
          if [[ ${{ matrix.os }} == "windows-latest" ]]; then
            ./gradlew.bat publishToMavenLocal
          else
            chmod +x gradlew
            ./gradlew publishToMavenLocal
          fi
        shell: bash

      - name: Run Export Task
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./gradlew.bat -p src\\test\\resources\\projects\\state-example export --info
          else
            ./gradlew -p src/test/resources/projects/state-example export --info
          fi
        shell: bash

      - name: Check Files in Distribution Directories
        run: |
          # Directories to check
          base_dir="src/test/resources/projects/state-example/build/ois/distribution"
          distribution_dir=("Html" "Desktop")
          
          for dir_name in "${distribution_dir[@]}"; do
            dir_path="$base_dir/dir_name"
          
            # Check if the directory exists
            if [ -d "$dir_path" ]; then
              # Check if there are any files in the directory
              if find "$dir_path" -type f -print -quit | grep -q .; then
                echo "Files found in $dir_path:"
                # List directory contents based on the OS
                if [[ ${{ matrix.os }} == "windows-latest" ]]; then
                  dir "$dir_path"
                else
                  ls -la "$dir_path"
                fi
              else
                echo "No files found in $dir_path." && exit 1
              fi
            else
              echo "Directory does not exist: $dir_path" && exit 1
            fi
          done
        shell: bash